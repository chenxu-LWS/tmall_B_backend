<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loveunited.tmall_b_backend.mapper.CommodityMapper">
    <resultMap id="commodityMap" type="Commodity">
        <id column="id" property="id"/>
        <result column="commodity_name" property="name"/>
        <result column="category_id" property="categoryID"/>
        <result column="brand_id" property="brandID"/>
        <result column="commodity_price" property="price"/>
        <result column="other_prop" property="props"/>
        <result column="status" property="status"/>
        <result column="detail" property="detail"/>
        <result column="inventory" property="inventory"/>
        <result column="sale_volume" property="saleVolume"/>
    </resultMap>
    
    <resultMap id="commoditySaleGroupByCatMap" type="CommoditySaleVolume">
        <result property="categoryId" column="category_id"/>
        <result property="totalPrice" column="sum"/>
    </resultMap>

    <resultMap id="commoditySaleGroupByBrandMap" type="CommoditySaleVolumeByBrand">
        <result property="brandId" column="brand_id"/>
        <result property="totalPrice" column="sum"/>
    </resultMap>

    <select id="queryCommodityByConditionByPage" resultMap="commodityMap">
        select * from commodity
        where status != 3
        <if test="list != null and list.size()!=0">
            AND category_id in
            <foreach collection="list" item="categories" open="(" separator="," close=")">
                #{categories}
            </foreach>
        </if>
        <if test="brandId != null">
            AND brand_id = #{brandId}
        </if>
        <if test="propK != null and propV != null">
            AND JSON_CONTAINS(other_prop, '"${propV}"', '$."${propK}"')
        </if>
        <if test="priceLow != null">
            AND commodity_price <![CDATA[ >= ]]> #{priceLow}
        </if>
        <if test="priceHigh != null">
            AND commodity_price <![CDATA[ <= ]]> #{priceHigh}
        </if>
        <if test="onlyOnSale != null and onlyOnSale != false">
            AND status = 1
        </if>
        <if test="sortedBy != null">
            order by ${sortedBy}
        </if>
        <if test="sortedBy != null and sortDesc != null and sortDesc != false">
            desc
        </if>
        limit #{offset}, #{pageSize}
    </select>
    <select id="queryCommodityByConditionTotalNum" resultType="java.lang.Integer">
        select count(*) from commodity
        where status != 3
        <if test="list != null and list.size()!=0">
            AND category_id in
            <foreach collection="list" item="categories" open="(" separator="," close=")">
                #{categories}
            </foreach>
        </if>
        <if test="brandId != null">
            AND brand_id = #{brandId}
        </if>
        <if test="propK != null and propV != null">
            AND JSON_CONTAINS(other_prop, '"${propV}"', '$."${propK}"')
        </if>
        <if test="onlyOnSale != null and onlyOnSale != false">
            AND status = 1
        </if>
        <if test="priceLow != null">
            AND commodity_price <![CDATA[ >= ]]> #{priceLow}
        </if>
        <if test="priceHigh != null">
            AND commodity_price <![CDATA[ <= ]]> #{priceHigh}
        </if>
    </select>

    <select id="queryCommodityById" resultMap="commodityMap">
        select * from commodity where id = #{id}
    </select>

    <select id="queryCommodityByBrandIdByPage" resultMap="commodityMap">
        select * from commodity where brand_id = #{brandId} limit #{offset}, #{pageSize}
    </select>
    <select id="queryCommodityByBrandIdTotalNum" resultType="java.lang.Integer">
        select count(*) from commodity where brand_id = #{brandId}
    </select>

    <select id="queryCommodityPropsById" resultType="java.lang.String">
        select other_prop from commodity where id = #{id}
    </select>

    <select id="queryCommodityListByStatusByPage" resultMap="commodityMap">
        select * from commodity where status = #{status} limit #{offset}, #{pageSize}
    </select>
    <select id="queryCommodityListByStatusTotalNum" resultType="java.lang.Integer">
        select count(*) from commodity where status = #{status}
    </select>

    <select id="batchQueryCommodityByCategoryIdByPage" resultMap="commodityMap" parameterType="list">
        select * from commodity where category_id in 
        <foreach collection="list" item="categories" open="(" separator="," close=")">
            #{categories}
        </foreach>
        limit #{offset}, #{pageSize}
    </select>
    <select id="batchQueryCommodityByCategoryIdTotalNum" resultType="java.lang.Integer">
        select count(*) from commodity where category_id in
        <foreach collection="list" item="categories" open="(" separator="," close=")">
            #{categories}
        </foreach>
    </select>

    <select id="queryCommodityByCategoryIdAndBrandIdByPage" resultMap="commodityMap" parameterType="list">
        select * from commodity where category_id in
            <foreach collection="list" item="categories" open="(" separator="," close=")">
                #{categories}
            </foreach>
        and brand_id = #{branchId} limit #{offset}, #{pageSize};
    </select>
    <select id="queryCommodityByCategoryIdAndBrandIdTotalNum" resultType="java.lang.Integer">
        select count(*) from commodity where category_id in
        <foreach collection="list" item="categories" open="(" separator="," close=")">
            #{categories}
        </foreach>
        and brand_id = #{branchId};
    </select>

    <select id="queryAllByPage" resultMap="commodityMap">
        select * from commodity limit #{offset}, #{pageSize}
    </select>
    <select id="queryAllTotalNum" resultType="java.lang.Integer">
        select count(*) from commodity
    </select>

    <select id="getTopNCategories" resultMap="commoditySaleGroupByCatMap">
        select
               a.category_id, sum(a.sale_volume * a.commodity_price) as sum
        from
            commodity a left join category b on a.category_id = b.id
        where b.category_level = 3
        group by a.category_id
        order by sum desc
        <if test="topN != null">
            limit #{topN}
        </if>
    </select>

    <select id="getTopNCommodities" resultMap="commodityMap">
        select * from commodity order by (sale_volume * commodity_price) desc
        <if test="topN != null">
            limit #{topN}
        </if>
    </select>

    <select id="getTopNBrands" resultMap="commoditySaleGroupByBrandMap">
        select
            a.brand_id, sum(a.sale_volume * a.commodity_price) as sum
        from
            commodity a left join brand b on a.brand_id = b.id
        group by a.brand_id
        order by sum desc
        <if test="topN != null">
            limit #{topN}
        </if>
    </select>

    <insert id="insertCommodity" useGeneratedKeys="true" keyColumn="id" keyProperty="id" parameterType="Commodity">
        insert into commodity (commodity_name, category_id, brand_id, commodity_price, other_prop, detail)
        values (#{name}, #{categoryID}, #{brandID}, #{price}, #{props}, #{detail})
    </insert>

    <update id="updateCommodityProperties">
        update commodity set other_prop=#{props} where id=#{id}
    </update>

    <update id="updateCommodityStatus">
        update commodity set status=#{status} where id=#{id}
    </update>

    <update id="updateCommodityPrice">
        update commodity set commodity_price=#{newPrice} where id=#{id}
    </update>

    <update id="increaseOrDecreaseInventory">
        update commodity
        set inventory =
                    (
                        select a.inventory from
                                (select * from commodity where id = #{id}) a
                    ) + (#{stockNum})
        where id = #{id}
    </update>

    <update id="updateCommodity">
        update commodity
        <set>
            <if test="name != null">
                commodity_name = #{name},
            </if>
            <if test="categoryId != null">
                category_id = #{categoryId},
            </if>
            <if test="brandId != null">
                brand_id = #{brandId},
            </if>
            <if test="price != null">
                commodity_price = #{price},
            </if>
            <if test="detail != null">
                detail = #{detail},
            </if>
        </set>
        where id = #{id}
    </update>
</mapper>